version: '3.8'

services:
  # ============================================================================
  # Frontend Service (Next.js)
  # ============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: luxoranova-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Backend Service (FastAPI)
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: luxoranova-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./storage:/app/storage
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://luxoranova:luxoranova123@postgres:5432/luxoranova
      - REDIS_URL=redis://redis:6379/0
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - OLLAMA_HOST=http://ollama:11434
      - N8N_HOST=http://n8n:5678
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - qdrant
    networks:
      - luxoranova-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # Agent Orchestrator Service (Node.js)
  # ============================================================================
  agent-orchestrator:
    build:
      context: ./agent-orchestrator
      dockerfile: Dockerfile
      target: development
    container_name: luxoranova-orchestrator
    ports:
      - "8001:8001"
    volumes:
      - ./agent-orchestrator:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://luxoranova:luxoranova123@postgres:5432/luxoranova
      - REDIS_URL=redis://redis:6379/0
      - BACKEND_URL=http://backend:8000
      - OLLAMA_HOST=http://ollama:11434
      - N8N_HOST=http://n8n:5678
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Computer Use Service (Python)
  # ============================================================================
  computer-use:
    build:
      context: ./computer-use-service
      dockerfile: Dockerfile
    container_name: luxoranova-computer-use
    ports:
      - "8002:8002"
    volumes:
      - ./computer-use-service:/app
      - /tmp/.X11-unix:/tmp/.X11-unix
    environment:
      - PYTHONUNBUFFERED=1
      - DISPLAY=:99
      - BACKEND_URL=http://backend:8000
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - backend
      - redis
    networks:
      - luxoranova-network
    restart: unless-stopped
    privileged: true

  # ============================================================================
  # PostgreSQL Database
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: luxoranova-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_DB=luxoranova
      - POSTGRES_USER=luxoranova
      - POSTGRES_PASSWORD=luxoranova123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    networks:
      - luxoranova-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U luxoranova"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # Redis Cache & Queue
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: luxoranova-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - luxoranova-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # RabbitMQ Message Queue
  # ============================================================================
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: luxoranova-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - luxoranova-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ============================================================================
  # Qdrant Vector Database
  # ============================================================================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: luxoranova-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Ollama (Local AI Models)
  # ============================================================================
  ollama:
    image: ollama/ollama:latest
    container_name: luxoranova-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - luxoranova-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  # ============================================================================
  # N8N Workflow Automation
  # ============================================================================
  n8n:
    image: n8nio/n8n:latest
    container_name: luxoranova-n8n
    ports:
      - "5678:5678"
    volumes:
      - n8n-data:/home/node/.n8n
      - ./n8n-workflows:/workflows
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Celery Worker (Background Tasks)
  # ============================================================================
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: luxoranova-celery-worker
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - ./backend:/app
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://luxoranova:luxoranova123@postgres:5432/luxoranova
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Celery Beat (Scheduled Tasks)
  # ============================================================================
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: luxoranova-celery-beat
    command: celery -A app.celery_app beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://luxoranova:luxoranova123@postgres:5432/luxoranova
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Prometheus (Metrics)
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: luxoranova-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Grafana (Dashboards)
  # ============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: luxoranova-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Jaeger (Distributed Tracing)
  # ============================================================================
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: luxoranova-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - luxoranova-network
    restart: unless-stopped

  # ============================================================================
  # Nginx (Reverse Proxy)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: luxoranova-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - luxoranova-network
    restart: unless-stopped

# ============================================================================
# Networks
# ============================================================================
networks:
  luxoranova-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  qdrant-data:
    driver: local
  ollama-data:
    driver: local
  n8n-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
